workflows:
    react-native-android:
        name: React Native Android
        max_build_duration: 120
        instance_type: mac_mini_m1
        environment:
          android_signing:
            - keystore_reference
          groups:
            - google_play # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS <-- Put your google-services.json)
          vars:
            PACKAGE_NAME: "com.uderdriverapp" # <-- Put your package name here e.g. com.domain.myapp
          node: v16.11.1
        scripts:
            - name: Install npm dependencies
              script: |
                npm install
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"            
            - name: Build Android release
              script: |
                LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME")
                if [ -z LATEST_BUILD_NUMBER ]; then
                  # fallback in case no build number was found from google play. Alternatively, you can `exit 1` to fail the build
                  UPDATED_BUILD_NUMBER=$BUILD_NUMBER
                else
                  UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
                fi
                cd android
                ./gradlew bundleRelease \
                  -PversionCode=$UPDATED_BUILD_NUMBER \
                  -PversionName=1.0.$UPDATED_BUILD_NUMBER
        artifacts:
            - android/app/build/outputs/**/*.aab
        publishing:
          email:
            recipients:
              - user_1@example.com
              - user_2@example.com
            notify:
              success: true     # To not receive a notification when a build succeeds
              failure: false    # To not receive a notification when a build fails
          google_play:
            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
            track: alpha   # Any default or custom track that is not in ‘draft’ status




    test-ios:
      name: Test iOS
      max_build_duration: 120
      instance_type: mac_mini_m1
      environment:
        # node: 14
        # yarn: 1.x
        # xcode: latest
        # android: latest
      scripts:
      #   - name: Install dependencies
      #     script: |
      #       # Add any setup steps here, like installing dependencies
      #       rm -rf node_modules package-lock.json
      #       npm install
      #       # If you use CocoaPods for iOS dependencies, you might need to run:
      #       # cd ios && pod install && cd ..

        - name: Build iOS app
          script: |
            # Build your React Native app for iOS
            npx react-native run-ios --configuration=Debug

        - name: Run tests (optional)
          script: |
            # You can run your tests here if you have any
            # Replace this with your specific testing command
            # For example:
            # npm test

        - name: Archive artifacts
          script: |
            # Archive any build artifacts for deployment or further testing
            # For example, you can create a .ipa file for distribution
            # For iOS:
            # xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release archive -archivePath $PWD/build/YourApp.xcarchive
            # xcodebuild -exportArchive -archivePath $PWD/build/YourApp.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $PWD/build
            # For Android:
            # Add Android build commands here if needed

        - name: Publish artifacts
          script: |
            # You can publish your build artifacts to a storage location
            # For example, to publish to AWS S3:
            # aws s3 cp ./build s3://your-bucket-name/ --recursive
            # Or to Firebase App Distribution:
            # firebase appdistribution:distribute ./build/YourApp.ipa --app your-firebase-app-id --groups your-distribution-groups --release-notes "Test build"

      # cache:
      #   paths:
      #     - node_modules
      #     - ios/Pods


    # react-native-ios:
    #     name: React Native iOS
    #     max_build_duration: 120
    #     instance_type: mac_mini_m1
        # integrations:
        #   app_store_connect: codemagic
        # environment:
        #   ios_signing:
        #     distribution_type: app_store
        #     bundle_identifier: com.uderdriverapp
        #   vars:
        #     XCODE_WORKSPACE: "CodemagicSample.xcworkspace" # <-- Put the name of your Xcode workspace here
        #     XCODE_SCHEME: "CodemagicSample" # <-- Put the name of your Xcode scheme here
        #     APP_ID: 1555555551 # <-- Put the app id number here. This is found in App Store Connect > App > General > App Information
        #   node: v16.11.1
        #   xcode: latest
        #   cocoapods: default
        # scripts:
        #     - name: Install npm dependencies
        #       script: |
        #         npm install
        #     - name: Install CocoaPods dependencies
        #       script: |
        #         cd ios && pod install
        #     - name: Set Info.plist values
        #       script: |
        #         # This allows publishing without manually answering the question about encryption 
        #         PLIST=$CM_BUILD_DIR/$XCODE_SCHEME/Info.plist
        #         PLIST_BUDDY=/usr/libexec/PlistBuddy
        #         $PLIST_BUDDY -c "Add :ITSAppUsesNonExemptEncryption bool false" $PLIST
        #     - name: Set up code signing settings on Xcode project
        #       script: |
        #         xcode-project use-profiles --warn-only
        #     - name: Increment build number
        #       script: |
        #         cd $CM_BUILD_DIR/ios
        #         LATEST_BUILD_NUMBER=$(app-store-connect get-latest-app-store-build-number "$APP_ID")
        #         agvtool new-version -all $(($LATEST_BUILD_NUMBER + 1))
        #     - name: Build ipa for distribution
        #       script: |
        #         xcode-project build-ipa \
        #           --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
        #           --scheme "$XCODE_SCHEME"
        # artifacts:
        #     - build/ios/ipa/*.ipa
        #     - /tmp/xcodebuild_logs/*.log
        #     - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
        #     - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        # publishing:
        #   email:
        #     recipients:
        #       - user_1@example.com
        #       - user_2@example.com
        #     notify:
        #       success: true
        #       failure: false
          # app_store_connect:
          #   auth: integration

            # submit_to_testflight: true
            # beta_groups: # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
            #   - group name 1
            #   - group name 2

            # submit_to_app_store: false
    